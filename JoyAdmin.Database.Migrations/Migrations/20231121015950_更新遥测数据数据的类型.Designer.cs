// <auto-generated />
using System;
using System.Text.Json;
using JoyAdmin.EntityFramework.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JoyAdmin.Database.Migrations.Migrations
{
    [DbContext(typeof(DefaultDbContext))]
    [Migration("20231121015950_更新遥测数据数据的类型")]
    partial class 更新遥测数据数据的类型
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_DefectItem", b =>
                {
                    b.Property<int>("DefectItem_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DefectItem_Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreateID")
                        .HasColumnType("integer");

                    b.Property<string>("Creator")
                        .HasColumnType("text");

                    b.Property<string>("DefectItemCode")
                        .HasColumnType("text");

                    b.Property<string>("DefectItemName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Modifier")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifyID")
                        .HasColumnType("integer");

                    b.HasKey("DefectItem_Id");

                    b.ToTable("Base_DefectItem", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_DesktopMenu", b =>
                {
                    b.Property<int>("DesktopMenu_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DesktopMenu_Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreateID")
                        .HasColumnType("integer");

                    b.Property<string>("Creator")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<byte>("Enable")
                        .HasColumnType("smallint");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MenuUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Modifier")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifyID")
                        .HasColumnType("integer");

                    b.HasKey("DesktopMenu_Id");

                    b.ToTable("Base_DesktopMenu", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_MaterialDetail", b =>
                {
                    b.Property<int>("MaterialDetail_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MaterialDetail_Id"));

                    b.Property<int>("ChildProduct_Id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreateID")
                        .HasColumnType("integer");

                    b.Property<string>("Creator")
                        .HasColumnType("text");

                    b.Property<string>("Modifier")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifyID")
                        .HasColumnType("integer");

                    b.Property<int>("ParentProduct_Id")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityPer")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("MaterialDetail_Id");

                    b.ToTable("Base_MaterialDetail", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_MeritPay", b =>
                {
                    b.Property<int>("MeritPay_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MeritPay_Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreateID")
                        .HasColumnType("integer");

                    b.Property<string>("Creator")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Modifier")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifyID")
                        .HasColumnType("integer");

                    b.Property<int?>("Process_Id")
                        .HasColumnType("integer");

                    b.Property<int?>("Product_Id")
                        .HasColumnType("integer");

                    b.Property<int?>("StandardHour")
                        .HasColumnType("integer");

                    b.Property<int?>("StandardMin")
                        .HasColumnType("integer");

                    b.Property<int?>("StandardNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("StandardSec")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<int?>("Unit_Id")
                        .HasColumnType("integer");

                    b.HasKey("MeritPay_Id");

                    b.ToTable("Base_MeritPay", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_Notice", b =>
                {
                    b.Property<int>("Notice_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Notice_Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreateID")
                        .HasColumnType("integer");

                    b.Property<string>("Creator")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Modifier")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifyID")
                        .HasColumnType("integer");

                    b.Property<string>("NoticeContent")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("NoticeTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("NoticeType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Notice_Id");

                    b.ToTable("Base_Notice", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_NumberRule", b =>
                {
                    b.Property<int>("NumberRule_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NumberRule_Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreateID")
                        .HasColumnType("integer");

                    b.Property<string>("Creator")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DateRule")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FormCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("GenerativeRule")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Modifier")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifyID")
                        .HasColumnType("integer");

                    b.Property<string>("Prefix")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int>("SNLength")
                        .HasColumnType("integer");

                    b.HasKey("NumberRule_Id");

                    b.ToTable("Base_NumberRule", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_Process", b =>
                {
                    b.Property<int>("Process_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Process_Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreateID")
                        .HasColumnType("integer");

                    b.Property<string>("Creator")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DefectItem")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Modifier")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifyID")
                        .HasColumnType("integer");

                    b.Property<string>("ProcessCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SubmitWorkLimit")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("SubmitWorkMatch")
                        .HasColumnType("numeric");

                    b.HasKey("Process_Id");

                    b.ToTable("Base_Process", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_ProcessLine", b =>
                {
                    b.Property<int>("ProcessLine_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProcessLine_Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreateID")
                        .HasColumnType("integer");

                    b.Property<string>("Creator")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Modifier")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifyID")
                        .HasColumnType("integer");

                    b.Property<string>("ProcessLineCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProcessLineName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ProcessLine_Id");

                    b.ToTable("Base_ProcessLine", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_ProcessLineList", b =>
                {
                    b.Property<int>("ProcessLineList_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProcessLineList_Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreateID")
                        .HasColumnType("integer");

                    b.Property<string>("Creator")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Modifier")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifyID")
                        .HasColumnType("integer");

                    b.Property<int?>("ProcessLineDown_Id")
                        .HasColumnType("integer");

                    b.Property<string>("ProcessLineType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ProcessLine_Id")
                        .HasColumnType("integer");

                    b.Property<int?>("Process_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SubmitWorkMatch")
                        .HasColumnType("numeric");

                    b.HasKey("ProcessLineList_Id");

                    b.HasIndex("ProcessLine_Id");

                    b.ToTable("Base_ProcessLineList", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_ProcessList", b =>
                {
                    b.Property<int>("ProcessList_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProcessList_Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreateID")
                        .HasColumnType("integer");

                    b.Property<string>("Creator")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DataPointName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DataPointType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Modifier")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifyID")
                        .HasColumnType("integer");

                    b.Property<int>("Process_Id")
                        .HasColumnType("integer");

                    b.HasKey("ProcessList_Id");

                    b.HasIndex("Process_Id");

                    b.ToTable("Base_ProcessList", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_Product", b =>
                {
                    b.Property<int>("Product_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Product_Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreateID")
                        .HasColumnType("integer");

                    b.Property<string>("Creator")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FinishedProduct")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("InventoryQty")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxInventory")
                        .HasColumnType("integer");

                    b.Property<int?>("MinInventory")
                        .HasColumnType("integer");

                    b.Property<string>("Modifier")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifyID")
                        .HasColumnType("integer");

                    b.Property<int?>("ProcessLine_Id")
                        .HasColumnType("integer");

                    b.Property<string>("ProductAttribute")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProductStandard")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("SafeInventory")
                        .HasColumnType("integer");

                    b.Property<int>("Unit_Id")
                        .HasColumnType("integer");

                    b.HasKey("Product_Id");

                    b.ToTable("Base_Product", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_WorkShop", b =>
                {
                    b.Property<Guid>("WorkShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Area")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreateID")
                        .HasColumnType("integer");

                    b.Property<string>("Creator")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Enable")
                        .HasColumnType("integer");

                    b.Property<string>("MainPerson")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Modifier")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifyID")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("WorkShopCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("WorkShopName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("WorkShopId");

                    b.ToTable("Base_WorkShop", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Sys_Unit", b =>
                {
                    b.Property<int>("Unit_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Unit_Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreateID")
                        .HasColumnType("integer");

                    b.Property<string>("Creator")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Modifier")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifyID")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Unit_Id");

                    b.ToTable("Sys_Unit", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.View_Base_MaterialDetail", b =>
                {
                    b.Property<int>("MaterialDetail_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MaterialDetail_Id"));

                    b.Property<string>("CProductCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CProductName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CProductStandard")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("CUnit_Id")
                        .HasColumnType("integer");

                    b.Property<int>("ChildProduct_Id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreateID")
                        .HasColumnType("integer");

                    b.Property<string>("Creator")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Modifier")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifyID")
                        .HasColumnType("integer");

                    b.Property<string>("PProductCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PProductName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PProductStandard")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("PUnit_Id")
                        .HasColumnType("integer");

                    b.Property<int>("ParentProduct_Id")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityPer")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("MaterialDetail_Id");

                    b.ToTable("View_Base_MaterialDetail", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Production.ProductionWorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActualQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NgQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("PlanQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<string>("ProductNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WorkOrderNo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductionWorkOrder", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Storage.AlarmHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Station")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EndTime");

                    b.HasIndex("StartTime");

                    b.HasIndex("Station");

                    b.ToTable("AlarmHistory", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Storage.DeviceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompletionMessage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text");

                    b.Property<bool>("IsHandled")
                        .HasColumnType("boolean");

                    b.Property<string>("Operator")
                        .HasColumnType("text");

                    b.Property<string>("RequestMessage")
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RequestTime");

                    b.ToTable("DeviceRequest", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Storage.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Device")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<int>("ProductionType")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WorkOrderNo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Device");

                    b.HasIndex("Model");

                    b.HasIndex("ProductionType");

                    b.HasIndex("WorkOrderNo");

                    b.ToTable("Production", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Storage.ShellCodeBinding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RotorCode")
                        .HasColumnType("text");

                    b.Property<string>("ShellCode")
                        .HasColumnType("text");

                    b.Property<string>("StatorCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RotorCode");

                    b.HasIndex("ShellCode");

                    b.HasIndex("StatorCode");

                    b.ToTable("ShellCodeBinding", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Storage.Telemetry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<string>("EntityName")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<JsonDocument>("Value")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("EntityName");

                    b.HasIndex("Key");

                    b.ToTable("Telemetry", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Storage.UploadData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WorkOrder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("Name");

                    b.ToTable("UploadData", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.IPLog", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedUser")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("ModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("RealIp")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Referer")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UserAccount")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("IPLog", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Role", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedUser")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("ModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Remark")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTime(2023, 11, 21, 9, 59, 49, 839, DateTimeKind.Local).AddTicks(9525),
                            CreatedUserId = 0L,
                            IsDeleted = false,
                            ModifiedUserId = 0L,
                            Name = "管理员",
                            Remark = "拥有系统管理权限",
                            Sort = 0
                        });
                });

            modelBuilder.Entity("JoyAdmin.Core.RoleSecurity", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("SecurityId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "SecurityId");

                    b.HasIndex("SecurityId");

                    b.ToTable("RoleSecurity", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1L,
                            SecurityId = 1L
                        },
                        new
                        {
                            RoleId = 1L,
                            SecurityId = 2L
                        },
                        new
                        {
                            RoleId = 1L,
                            SecurityId = 3L
                        });
                });

            modelBuilder.Entity("JoyAdmin.Core.Security", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedUser")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("ModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UniqueName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Security", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTime(2023, 11, 21, 9, 59, 49, 840, DateTimeKind.Local).AddTicks(1136),
                            CreatedUserId = 0L,
                            IsDeleted = false,
                            ModifiedUserId = 0L,
                            Sort = 0,
                            UniqueCode = "role",
                            UniqueName = "角色管理"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedTime = new DateTime(2023, 11, 21, 9, 59, 49, 840, DateTimeKind.Local).AddTicks(1141),
                            CreatedUserId = 0L,
                            IsDeleted = false,
                            ModifiedUserId = 0L,
                            Sort = 0,
                            UniqueCode = "auth",
                            UniqueName = "权限管理"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedTime = new DateTime(2023, 11, 21, 9, 59, 49, 840, DateTimeKind.Local).AddTicks(1143),
                            CreatedUserId = 0L,
                            IsDeleted = false,
                            ModifiedUserId = 0L,
                            Sort = 0,
                            UniqueCode = "employee",
                            UniqueName = "员工管理"
                        });
                });

            modelBuilder.Entity("JoyAdmin.Core.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Account")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkPost")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedUser")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("ModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Account = "admin",
                            CreatedTime = new DateTime(2023, 11, 21, 9, 59, 49, 840, DateTimeKind.Local).AddTicks(7440),
                            CreatedUserId = 0L,
                            IsDeleted = false,
                            ModifiedUserId = 0L,
                            Password = "e10adc3949ba59abbe56e057f20f883e"
                        });
                });

            modelBuilder.Entity("JoyAdmin.Core.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Storage.TelemetryData", b =>
                {
                    b.HasBaseType("JoyAdmin.Core.Entities.Storage.Telemetry");

                    b.ToTable("TelemetryData", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Storage.TelemetryLatest", b =>
                {
                    b.HasBaseType("JoyAdmin.Core.Entities.Storage.Telemetry");

                    b.ToTable("TelemetryLatest", (string)null);
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_ProcessLineList", b =>
                {
                    b.HasOne("JoyAdmin.Core.Entities.Custom.Base_ProcessLine", null)
                        .WithMany("Base_ProcessLineList")
                        .HasForeignKey("ProcessLine_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_ProcessList", b =>
                {
                    b.HasOne("JoyAdmin.Core.Entities.Custom.Base_Process", null)
                        .WithMany("Base_ProcessList")
                        .HasForeignKey("Process_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JoyAdmin.Core.RoleSecurity", b =>
                {
                    b.HasOne("JoyAdmin.Core.Role", "Role")
                        .WithMany("RoleSecurities")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoyAdmin.Core.Security", "Security")
                        .WithMany("RoleSecurities")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("JoyAdmin.Core.UserRole", b =>
                {
                    b.HasOne("JoyAdmin.Core.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoyAdmin.Core.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Storage.TelemetryData", b =>
                {
                    b.HasOne("JoyAdmin.Core.Entities.Storage.Telemetry", null)
                        .WithOne()
                        .HasForeignKey("JoyAdmin.Core.Entities.Storage.TelemetryData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Storage.TelemetryLatest", b =>
                {
                    b.HasOne("JoyAdmin.Core.Entities.Storage.Telemetry", null)
                        .WithOne()
                        .HasForeignKey("JoyAdmin.Core.Entities.Storage.TelemetryLatest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_Process", b =>
                {
                    b.Navigation("Base_ProcessList");
                });

            modelBuilder.Entity("JoyAdmin.Core.Entities.Custom.Base_ProcessLine", b =>
                {
                    b.Navigation("Base_ProcessLineList");
                });

            modelBuilder.Entity("JoyAdmin.Core.Role", b =>
                {
                    b.Navigation("RoleSecurities");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("JoyAdmin.Core.Security", b =>
                {
                    b.Navigation("RoleSecurities");
                });

            modelBuilder.Entity("JoyAdmin.Core.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
